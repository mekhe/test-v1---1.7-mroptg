name: Security Scan

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  push:
    branches: ['main', 'develop']
    paths:
      - 'src/**'
      - 'package.json'
      - 'yarn.lock'
      - 'Dockerfile'
  pull_request:
    branches: ['main']

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ['javascript', 'typescript']
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript,typescript"
          upload: true

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Snyk Backend Scan
        uses: snyk/actions/node@0.4.0
        with:
          command: test
          args: --severity-threshold=high
          file: ./src/backend/package.json
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}

      - name: Run Snyk Frontend Scan
        uses: snyk/actions/node@0.4.0
        with:
          command: test
          args: --severity-threshold=high
          file: ./src/web/package.json
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}

      - name: Generate Dependency Report
        if: always()
        run: |
          echo "# Dependency Security Report" > dependency-report.md
          echo "## Backend Dependencies" >> dependency-report.md
          snyk test --json ./src/backend | jq -r '.vulnerabilities[] | "- " + .title' >> dependency-report.md
          echo "## Frontend Dependencies" >> dependency-report.md
          snyk test --json ./src/web | jq -r '.vulnerabilities[] | "- " + .title' >> dependency-report.md

      - name: Upload Dependency Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-report.md
          retention-days: 7

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [static-analysis]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Trivy Backend Container Scan
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'backend'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'

      - name: Run Trivy Frontend Container Scan
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'frontend'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: container-security

  security-report:
    name: Security Report Generation
    needs: [static-analysis, dependency-scan, container-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download Analysis Results
        uses: actions/download-artifact@v3
        with:
          path: security-results

      - name: Generate Security Report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Static Analysis" >> security-report.md
          cat security-results/codeql-results/*.sarif >> security-report.md
          echo "## Dependency Analysis" >> security-report.md
          cat security-results/dependency-report/dependency-report.md >> security-report.md
          echo "## Container Analysis" >> security-report.md
          cat security-results/trivy-results/*.sarif >> security-report.md

      - name: Check Security Gates
        run: |
          HIGH_VULNS=$(cat security-report.md | grep -c "severity: high" || true)
          CRITICAL_VULNS=$(cat security-report.md | grep -c "severity: critical" || true)
          
          if [ $CRITICAL_VULNS -gt 0 ]; then
            echo "❌ Found $CRITICAL_VULNS critical vulnerabilities"
            exit 1
          fi
          
          if [ $HIGH_VULNS -gt 5 ]; then
            echo "❌ Found $HIGH_VULNS high vulnerabilities (threshold: 5)"
            exit 1
          fi
          
          echo "✅ Security gates passed"

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: security-report.md
          retention-days: 30

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::Security scan failed. Please review the security report for details."